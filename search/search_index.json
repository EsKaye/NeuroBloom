{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"NeuroBloom Documentation Welcome to the sacred knowledge base of NeuroBloom. Divine Law","title":"Home"},{"location":"#neurobloom-documentation","text":"Welcome to the sacred knowledge base of NeuroBloom. Divine Law","title":"NeuroBloom Documentation"},{"location":"ARCHITECTURE/","text":"\ud83c\udfdb\ufe0f NeuroBloom Architecture System Overview NeuroBloom is built on a modular architecture that emphasizes emotional resonance, persistence, and real-time interaction. The system is designed to create a deeply personal experience while maintaining performance and scalability. Core Systems 1. Memory Engine ( EmotionMemorySystem ) Purpose : Manages player emotional states and memory persistence Components : DataStore integration for persistence Emotional state tracking Memory fragment system Garden state synchronization 2. Plant System ( PlantModule ) Purpose : Handles plant growth, interactions, and emotional responses Components : Plant archetype definitions Growth stage management Emotional response system Animation and effect controllers 3. Garden Environment ( MainGardenScene ) Purpose : Creates the immersive garden environment Components : Biome system Environmental effects Sound system Lighting controller 4. Ritual System ( GardenRituals ) Purpose : Manages daily rituals and player interactions Components : Ritual scheduling Interaction handlers Progress tracking Reward system 5. UI System ( UI_MainMenu ) Purpose : Provides intuitive user interface Components : Main menu Garden view Memory viewer Settings panel 6. Save System ( GardenSaveSystem ) Purpose : Manages game state persistence Components : Auto-save functionality State recovery Data validation Backup system Data Flow graph TD A[Player Input] --> B[EmotionMemorySystem] B --> C[PlantModule] C --> D[Garden Environment] D --> E[Save System] E --> B Technical Specifications Performance Considerations Optimized plant rendering Efficient memory management Background data processing Asset streaming Security Measures Data encryption Input validation Rate limiting Anti-exploit measures Scalability Modular design Resource pooling Dynamic loading State management Development Guidelines Code Organization Clear module separation Consistent naming conventions Comprehensive documentation Error handling Testing Strategy Unit tests Integration tests Performance benchmarks User acceptance testing Future Considerations Mobile optimization Cross-platform support Social features Analytics integration","title":"\ud83c\udfdb\ufe0f NeuroBloom Architecture"},{"location":"ARCHITECTURE/#neurobloom-architecture","text":"","title":"\ud83c\udfdb\ufe0f NeuroBloom Architecture"},{"location":"ARCHITECTURE/#system-overview","text":"NeuroBloom is built on a modular architecture that emphasizes emotional resonance, persistence, and real-time interaction. The system is designed to create a deeply personal experience while maintaining performance and scalability.","title":"System Overview"},{"location":"ARCHITECTURE/#core-systems","text":"","title":"Core Systems"},{"location":"ARCHITECTURE/#1-memory-engine-emotionmemorysystem","text":"Purpose : Manages player emotional states and memory persistence Components : DataStore integration for persistence Emotional state tracking Memory fragment system Garden state synchronization","title":"1. Memory Engine (EmotionMemorySystem)"},{"location":"ARCHITECTURE/#2-plant-system-plantmodule","text":"Purpose : Handles plant growth, interactions, and emotional responses Components : Plant archetype definitions Growth stage management Emotional response system Animation and effect controllers","title":"2. Plant System (PlantModule)"},{"location":"ARCHITECTURE/#3-garden-environment-maingardenscene","text":"Purpose : Creates the immersive garden environment Components : Biome system Environmental effects Sound system Lighting controller","title":"3. Garden Environment (MainGardenScene)"},{"location":"ARCHITECTURE/#4-ritual-system-gardenrituals","text":"Purpose : Manages daily rituals and player interactions Components : Ritual scheduling Interaction handlers Progress tracking Reward system","title":"4. Ritual System (GardenRituals)"},{"location":"ARCHITECTURE/#5-ui-system-ui_mainmenu","text":"Purpose : Provides intuitive user interface Components : Main menu Garden view Memory viewer Settings panel","title":"5. UI System (UI_MainMenu)"},{"location":"ARCHITECTURE/#6-save-system-gardensavesystem","text":"Purpose : Manages game state persistence Components : Auto-save functionality State recovery Data validation Backup system","title":"6. Save System (GardenSaveSystem)"},{"location":"ARCHITECTURE/#data-flow","text":"graph TD A[Player Input] --> B[EmotionMemorySystem] B --> C[PlantModule] C --> D[Garden Environment] D --> E[Save System] E --> B","title":"Data Flow"},{"location":"ARCHITECTURE/#technical-specifications","text":"","title":"Technical Specifications"},{"location":"ARCHITECTURE/#performance-considerations","text":"Optimized plant rendering Efficient memory management Background data processing Asset streaming","title":"Performance Considerations"},{"location":"ARCHITECTURE/#security-measures","text":"Data encryption Input validation Rate limiting Anti-exploit measures","title":"Security Measures"},{"location":"ARCHITECTURE/#scalability","text":"Modular design Resource pooling Dynamic loading State management","title":"Scalability"},{"location":"ARCHITECTURE/#development-guidelines","text":"","title":"Development Guidelines"},{"location":"ARCHITECTURE/#code-organization","text":"Clear module separation Consistent naming conventions Comprehensive documentation Error handling","title":"Code Organization"},{"location":"ARCHITECTURE/#testing-strategy","text":"Unit tests Integration tests Performance benchmarks User acceptance testing","title":"Testing Strategy"},{"location":"ARCHITECTURE/#future-considerations","text":"Mobile optimization Cross-platform support Social features Analytics integration","title":"Future Considerations"},{"location":"DEPLOYMENT/","text":"Deployment Guide This guide will help you deploy NeuroBloom to Roblox Studio. Prerequisites Roblox Studio (Latest Version) A Roblox account with developer permissions Git installed on your system Deployment Steps 1. Project Setup Open Roblox Studio Create a new place Save the place with a name (e.g., \"NeuroBloom\") 2. File Structure Setup Create the following folder structure in Roblox Studio: ServerScriptService/ \u251c\u2500\u2500 Modules/ \u2502 \u251c\u2500\u2500 PlantVisuals.lua \u2502 \u251c\u2500\u2500 SoundSystem.lua \u2502 \u2514\u2500\u2500 GardenRituals.lua \u251c\u2500\u2500 init.server.lua \u2514\u2500\u2500 GardenScene.lua StarterGui/ \u251c\u2500\u2500 MainMenu.lua \u251c\u2500\u2500 RitualUI.lua \u2514\u2500\u2500 SettingsUI.lua StarterPlayerScripts/ \u2514\u2500\u2500 init.client.lua 3. File Import Copy the contents of each Lua file from the repository into the corresponding files in Roblox Studio Ensure all files are in their correct locations Check that all scripts are properly parented to their respective services 4. Configuration In Roblox Studio, go to Game Settings Configure the following: Game Name: \"NeuroBloom: Ritual Garden\" Description: Add a brief description Genre: Simulation Enable Studio Access to API Services Configure appropriate permissions 5. Testing Test the game in Studio: Run the game Check all UI elements Verify sound system Test plant interactions Verify ritual system Check settings functionality Common issues to check: Script execution order Service dependencies Sound IDs Model references 6. Publishing In Roblox Studio: Click File > Publish to Roblox Fill in required information Set appropriate permissions Click Publish After publishing: Test the published version Verify all features work Check performance Monitor for any issues Post-Deployment Monitoring Use Roblox Analytics to monitor: Player engagement Performance metrics Error rates User feedback Updates For updates: Make changes in Studio Test thoroughly Publish new version Update version number Document changes Troubleshooting Common Issues Script Errors Check Output window Verify script execution order Check for missing dependencies Performance Issues Monitor memory usage Check script optimization Verify asset loading Sound Issues Verify sound IDs Check sound service Test volume controls Support For additional support: 1. Check the documentation 2. Open an issue on GitHub 3. Contact the development team Security Considerations Data Protection Secure player data Implement proper permissions Use DataStore appropriately Access Control Set appropriate permissions Implement admin controls Monitor for abuse Maintenance Regular Updates Monitor for bugs Implement improvements Update documentation Backup Regular place backups Version control Document changes Remember to keep your Roblox Studio and all scripts up to date with the latest versions from the repository.","title":"Deployment Guide"},{"location":"DEPLOYMENT/#deployment-guide","text":"This guide will help you deploy NeuroBloom to Roblox Studio.","title":"Deployment Guide"},{"location":"DEPLOYMENT/#prerequisites","text":"Roblox Studio (Latest Version) A Roblox account with developer permissions Git installed on your system","title":"Prerequisites"},{"location":"DEPLOYMENT/#deployment-steps","text":"","title":"Deployment Steps"},{"location":"DEPLOYMENT/#1-project-setup","text":"Open Roblox Studio Create a new place Save the place with a name (e.g., \"NeuroBloom\")","title":"1. Project Setup"},{"location":"DEPLOYMENT/#2-file-structure-setup","text":"Create the following folder structure in Roblox Studio: ServerScriptService/ \u251c\u2500\u2500 Modules/ \u2502 \u251c\u2500\u2500 PlantVisuals.lua \u2502 \u251c\u2500\u2500 SoundSystem.lua \u2502 \u2514\u2500\u2500 GardenRituals.lua \u251c\u2500\u2500 init.server.lua \u2514\u2500\u2500 GardenScene.lua StarterGui/ \u251c\u2500\u2500 MainMenu.lua \u251c\u2500\u2500 RitualUI.lua \u2514\u2500\u2500 SettingsUI.lua StarterPlayerScripts/ \u2514\u2500\u2500 init.client.lua","title":"2. File Structure Setup"},{"location":"DEPLOYMENT/#3-file-import","text":"Copy the contents of each Lua file from the repository into the corresponding files in Roblox Studio Ensure all files are in their correct locations Check that all scripts are properly parented to their respective services","title":"3. File Import"},{"location":"DEPLOYMENT/#4-configuration","text":"In Roblox Studio, go to Game Settings Configure the following: Game Name: \"NeuroBloom: Ritual Garden\" Description: Add a brief description Genre: Simulation Enable Studio Access to API Services Configure appropriate permissions","title":"4. Configuration"},{"location":"DEPLOYMENT/#5-testing","text":"Test the game in Studio: Run the game Check all UI elements Verify sound system Test plant interactions Verify ritual system Check settings functionality Common issues to check: Script execution order Service dependencies Sound IDs Model references","title":"5. Testing"},{"location":"DEPLOYMENT/#6-publishing","text":"In Roblox Studio: Click File > Publish to Roblox Fill in required information Set appropriate permissions Click Publish After publishing: Test the published version Verify all features work Check performance Monitor for any issues","title":"6. Publishing"},{"location":"DEPLOYMENT/#post-deployment","text":"","title":"Post-Deployment"},{"location":"DEPLOYMENT/#monitoring","text":"Use Roblox Analytics to monitor: Player engagement Performance metrics Error rates User feedback","title":"Monitoring"},{"location":"DEPLOYMENT/#updates","text":"For updates: Make changes in Studio Test thoroughly Publish new version Update version number Document changes","title":"Updates"},{"location":"DEPLOYMENT/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"DEPLOYMENT/#common-issues","text":"Script Errors Check Output window Verify script execution order Check for missing dependencies Performance Issues Monitor memory usage Check script optimization Verify asset loading Sound Issues Verify sound IDs Check sound service Test volume controls","title":"Common Issues"},{"location":"DEPLOYMENT/#support","text":"For additional support: 1. Check the documentation 2. Open an issue on GitHub 3. Contact the development team","title":"Support"},{"location":"DEPLOYMENT/#security-considerations","text":"Data Protection Secure player data Implement proper permissions Use DataStore appropriately Access Control Set appropriate permissions Implement admin controls Monitor for abuse","title":"Security Considerations"},{"location":"DEPLOYMENT/#maintenance","text":"Regular Updates Monitor for bugs Implement improvements Update documentation Backup Regular place backups Version control Document changes Remember to keep your Roblox Studio and all scripts up to date with the latest versions from the repository.","title":"Maintenance"},{"location":"DEVELOPMENT/","text":"Development Guide This guide provides information for developers contributing to NeuroBloom. Development Environment Prerequisites Roblox Studio (Latest Version) Git Basic understanding of Lua Familiarity with Roblox development Setup Clone the repository Open Roblox Studio Create a new place Import the project files Configure Studio settings Code Style Lua Style Guide Use PascalCase for module names Use camelCase for variables and functions Use UPPER_CASE for constants Indent with 4 spaces Maximum line length: 100 characters Example local MyModule = {} local CONSTANT_VALUE = 100 local function privateFunction() -- Implementation end function MyModule.PublicFunction() -- Implementation end return MyModule Module Development Creating New Modules Create file in appropriate directory Follow module template Add documentation Update dependencies Module Template --[[ ModuleName.lua Brief description of the module Features: - Feature 1 - Feature 2 ]] local ModuleName = {} -- Constants local CONSTANTS = { -- Constants here } -- Private variables local privateVar = nil -- Private functions local function privateFunction() -- Implementation end -- Public API function ModuleName.Initialize() -- Implementation end return ModuleName Testing Unit Testing Test each module independently Verify all public functions Check error handling Test edge cases Integration Testing Test module interactions Verify event handling Check performance Test user interactions Debugging Common Issues Script Execution Order Check service dependencies Verify initialization order Use WaitForChild when needed Performance Issues Monitor memory usage Check for memory leaks Optimize loops Reduce instance creation Network Issues Verify remote events Check data serialization Monitor bandwidth usage Handle disconnections Debug Tools Output window Developer console Performance monitor Network monitor Version Control Git Workflow Create feature branch Make changes Test thoroughly Create pull request Code review Merge to main Commit Messages Use present tense Start with verb Keep it concise Reference issues Example: feat: Add new plant type fix: Resolve sound system memory leak docs: Update module documentation Documentation Code Documentation Document all public functions Explain complex logic Include usage examples Update when changing code Example --[[ Creates a new plant instance Parameters: - plantType: string - Type of plant to create - position: Vector3 - Position in the garden Returns: - Instance - The created plant Example: local plant = PlantSystem.CreatePlant(\"JOY\", Vector3.new(0, 0, 0)) ]] function PlantSystem.CreatePlant(plantType, position) -- Implementation end Performance Guidelines Optimization Instance Management Reuse instances when possible Clean up unused instances Use instance pooling Monitor instance count Event Handling Disconnect events when done Use weak references Avoid nested connections Monitor event count Memory Management Clear references Use weak tables Monitor memory usage Clean up resources Security Best Practices Data Validation Validate all inputs Sanitize user data Check permissions Handle errors Network Security Use secure remotes Validate server calls Rate limit requests Monitor for abuse Deployment Pre-deployment Checklist Code Review Check style guide Verify documentation Test functionality Review security Testing Run all tests Check performance Verify compatibility Test edge cases Documentation Update changelog Update version Update documentation Create release notes Deployment Steps Create release branch Update version numbers Run final tests Create release Deploy to Roblox Monitor for issues Support Getting Help Check documentation Search issues Ask in discussions Contact maintainers Contributing Fork repository Create branch Make changes Submit pull request Respond to feedback Resources Learning Roblox Developer Hub Lua Documentation Roblox API Reference Tools Roblox Studio Git VS Code Roblox Plugin Suite Remember to keep this guide updated as the project evolves.","title":"Development Guide"},{"location":"DEVELOPMENT/#development-guide","text":"This guide provides information for developers contributing to NeuroBloom.","title":"Development Guide"},{"location":"DEVELOPMENT/#development-environment","text":"","title":"Development Environment"},{"location":"DEVELOPMENT/#prerequisites","text":"Roblox Studio (Latest Version) Git Basic understanding of Lua Familiarity with Roblox development","title":"Prerequisites"},{"location":"DEVELOPMENT/#setup","text":"Clone the repository Open Roblox Studio Create a new place Import the project files Configure Studio settings","title":"Setup"},{"location":"DEVELOPMENT/#code-style","text":"","title":"Code Style"},{"location":"DEVELOPMENT/#lua-style-guide","text":"Use PascalCase for module names Use camelCase for variables and functions Use UPPER_CASE for constants Indent with 4 spaces Maximum line length: 100 characters","title":"Lua Style Guide"},{"location":"DEVELOPMENT/#example","text":"local MyModule = {} local CONSTANT_VALUE = 100 local function privateFunction() -- Implementation end function MyModule.PublicFunction() -- Implementation end return MyModule","title":"Example"},{"location":"DEVELOPMENT/#module-development","text":"","title":"Module Development"},{"location":"DEVELOPMENT/#creating-new-modules","text":"Create file in appropriate directory Follow module template Add documentation Update dependencies","title":"Creating New Modules"},{"location":"DEVELOPMENT/#module-template","text":"--[[ ModuleName.lua Brief description of the module Features: - Feature 1 - Feature 2 ]] local ModuleName = {} -- Constants local CONSTANTS = { -- Constants here } -- Private variables local privateVar = nil -- Private functions local function privateFunction() -- Implementation end -- Public API function ModuleName.Initialize() -- Implementation end return ModuleName","title":"Module Template"},{"location":"DEVELOPMENT/#testing","text":"","title":"Testing"},{"location":"DEVELOPMENT/#unit-testing","text":"Test each module independently Verify all public functions Check error handling Test edge cases","title":"Unit Testing"},{"location":"DEVELOPMENT/#integration-testing","text":"Test module interactions Verify event handling Check performance Test user interactions","title":"Integration Testing"},{"location":"DEVELOPMENT/#debugging","text":"","title":"Debugging"},{"location":"DEVELOPMENT/#common-issues","text":"Script Execution Order Check service dependencies Verify initialization order Use WaitForChild when needed Performance Issues Monitor memory usage Check for memory leaks Optimize loops Reduce instance creation Network Issues Verify remote events Check data serialization Monitor bandwidth usage Handle disconnections","title":"Common Issues"},{"location":"DEVELOPMENT/#debug-tools","text":"Output window Developer console Performance monitor Network monitor","title":"Debug Tools"},{"location":"DEVELOPMENT/#version-control","text":"","title":"Version Control"},{"location":"DEVELOPMENT/#git-workflow","text":"Create feature branch Make changes Test thoroughly Create pull request Code review Merge to main","title":"Git Workflow"},{"location":"DEVELOPMENT/#commit-messages","text":"Use present tense Start with verb Keep it concise Reference issues Example: feat: Add new plant type fix: Resolve sound system memory leak docs: Update module documentation","title":"Commit Messages"},{"location":"DEVELOPMENT/#documentation","text":"","title":"Documentation"},{"location":"DEVELOPMENT/#code-documentation","text":"Document all public functions Explain complex logic Include usage examples Update when changing code","title":"Code Documentation"},{"location":"DEVELOPMENT/#example_1","text":"--[[ Creates a new plant instance Parameters: - plantType: string - Type of plant to create - position: Vector3 - Position in the garden Returns: - Instance - The created plant Example: local plant = PlantSystem.CreatePlant(\"JOY\", Vector3.new(0, 0, 0)) ]] function PlantSystem.CreatePlant(plantType, position) -- Implementation end","title":"Example"},{"location":"DEVELOPMENT/#performance-guidelines","text":"","title":"Performance Guidelines"},{"location":"DEVELOPMENT/#optimization","text":"Instance Management Reuse instances when possible Clean up unused instances Use instance pooling Monitor instance count Event Handling Disconnect events when done Use weak references Avoid nested connections Monitor event count Memory Management Clear references Use weak tables Monitor memory usage Clean up resources","title":"Optimization"},{"location":"DEVELOPMENT/#security","text":"","title":"Security"},{"location":"DEVELOPMENT/#best-practices","text":"Data Validation Validate all inputs Sanitize user data Check permissions Handle errors Network Security Use secure remotes Validate server calls Rate limit requests Monitor for abuse","title":"Best Practices"},{"location":"DEVELOPMENT/#deployment","text":"","title":"Deployment"},{"location":"DEVELOPMENT/#pre-deployment-checklist","text":"Code Review Check style guide Verify documentation Test functionality Review security Testing Run all tests Check performance Verify compatibility Test edge cases Documentation Update changelog Update version Update documentation Create release notes","title":"Pre-deployment Checklist"},{"location":"DEVELOPMENT/#deployment-steps","text":"Create release branch Update version numbers Run final tests Create release Deploy to Roblox Monitor for issues","title":"Deployment Steps"},{"location":"DEVELOPMENT/#support","text":"","title":"Support"},{"location":"DEVELOPMENT/#getting-help","text":"Check documentation Search issues Ask in discussions Contact maintainers","title":"Getting Help"},{"location":"DEVELOPMENT/#contributing","text":"Fork repository Create branch Make changes Submit pull request Respond to feedback","title":"Contributing"},{"location":"DEVELOPMENT/#resources","text":"","title":"Resources"},{"location":"DEVELOPMENT/#learning","text":"Roblox Developer Hub Lua Documentation Roblox API Reference","title":"Learning"},{"location":"DEVELOPMENT/#tools","text":"Roblox Studio Git VS Code Roblox Plugin Suite Remember to keep this guide updated as the project evolves.","title":"Tools"},{"location":"ROADMAP/","text":"NeuroBloom Development Roadmap \ud83c\udfaf Vision NeuroBloom is an emotional healing game that combines gardening, rituals, and memory preservation to create a therapeutic experience. Players cultivate plants that respond to their emotional states, participate in meaningful rituals, and preserve their journey through a unique memory system. \ud83d\uddfa\ufe0f Phase 1: Core Systems (Current Sprint) Garden Environment [x] Basic garden scene setup [x] Biome system (Light Meadow, Shadow Garden, Void Basin) [x] Dynamic terrain generation [ ] Weather system [ ] Day/night cycle [ ] Seasonal changes Plant System [x] Basic plant growth mechanics [x] Plant visualization [ ] Advanced plant mutations [ ] Cross-pollination system [ ] Plant disease system [ ] Plant care mechanics [ ] Plant lifecycle events Ritual System [x] Basic ritual mechanics [x] Ritual visualization [ ] Advanced ritual types [ ] Group rituals [ ] Ritual rewards [ ] Ritual progression [ ] Ritual customization Memory System [x] Basic memory storage [x] Memory visualization [ ] Memory effects [ ] Memory sharing [ ] Memory preservation [ ] Memory categories [ ] Memory search UI/UX [x] Main menu [x] Settings menu [x] Memory viewer [ ] Plant viewer [ ] Ritual interface [ ] Emotion tracker [ ] Progress dashboard \ud83d\uddfa\ufe0f Phase 2: Environment & Atmosphere Garden Environment [x] Basic garden layout [ ] Dynamic weather system [ ] Day/night cycle [ ] Seasonal changes [ ] Ambient effects [ ] Sound design [ ] Particle systems Biomes [x] Light Meadow [x] Shadow Garden [x] Void Basin [ ] Biome transitions [ ] Biome-specific plants [ ] Biome effects [ ] Biome interactions \ud83d\uddfa\ufe0f Phase 3: Social Features Multiplayer [ ] Player interactions [ ] Garden sharing [ ] Plant trading [ ] Ritual collaboration [ ] Memory sharing [ ] Friend system [ ] Chat system Community [ ] Leaderboards [ ] Achievements [ ] Events [ ] Challenges [ ] Community garden [ ] Player profiles [ ] Social features \ud83d\uddfa\ufe0f Phase 4: Advanced Features Emotional Intelligence [ ] Emotion tracking [ ] Mood analysis [ ] Emotional patterns [ ] Personal insights [ ] Growth tracking [ ] Progress visualization [ ] Recommendations Progression System [ ] Player levels [ ] Skill trees [ ] Unlockables [ ] Achievements [ ] Rewards [ ] Challenges [ ] Milestones \ud83d\uddfa\ufe0f Phase 5: Polish & Optimization Performance [ ] Code optimization [ ] Memory management [ ] Network optimization [ ] Load times [ ] Asset optimization [ ] Caching system [ ] Error handling Quality of Life [ ] Tutorial system [ ] Help documentation [ ] Accessibility features [ ] UI improvements [ ] Bug fixes [ ] User feedback [ ] Analytics \ud83d\uddfa\ufe0f Phase 6: Expansion Content [ ] New plant types [ ] New rituals [ ] New biomes [ ] New memories [ ] New effects [ ] New features [ ] Seasonal content Monetization [ ] Premium features [ ] Cosmetic items [ ] Special plants [ ] Custom effects [ ] Garden themes [ ] Memory packs [ ] Ritual packs \ud83d\udcca Current Sprint Goals (2 Weeks) Week 1: Core Systems Enhancement Plant System Implement plant mutations Add cross-pollination mechanics Create plant disease system Ritual System Add advanced ritual types Implement group ritual mechanics Create ritual combinations Memory System Add memory categories Implement memory effects Create memory persistence Week 2: Environment & UI Garden Environment Implement weather system Add day/night cycle Create seasonal changes UI Improvements Enhance plant interaction UI Improve ritual visualization Update memory viewing interface Performance & Polish Optimize memory system Improve visual effects Add sound effects \ud83c\udfaf Success Metrics User engagement metrics Emotional impact measurements System performance indicators User feedback scores Community growth rates \ud83d\udd04 Development Process Planning Feature prioritization Technical design Resource allocation Development Agile sprints Code reviews Testing Review User testing Performance analysis Feedback integration Iteration Feature refinement Bug fixes Performance optimization \ud83d\udcc8 Future Considerations Research partnerships Community building Platform expansion Monetization strategy Long-term sustainability \ud83c\udfae Game Design Principles Emotional Impact Meaningful interactions Personal growth Therapeutic value Accessibility Easy to learn Inclusive design Multiple play styles Engagement Daily activities Long-term progression Social features Innovation Unique mechanics Emotional intelligence Adaptive systems \ud83d\udd27 Technical Considerations Performance Memory optimization Network efficiency Cross-platform compatibility Security Data protection User privacy Safe interactions Scalability Growing user base Feature expansion Platform support \ud83c\udfaf Next Steps Complete current sprint goals Gather user feedback Plan next sprint Review and adjust roadmap Prepare for Phase 2","title":"NeuroBloom Development Roadmap"},{"location":"ROADMAP/#neurobloom-development-roadmap","text":"","title":"NeuroBloom Development Roadmap"},{"location":"ROADMAP/#vision","text":"NeuroBloom is an emotional healing game that combines gardening, rituals, and memory preservation to create a therapeutic experience. Players cultivate plants that respond to their emotional states, participate in meaningful rituals, and preserve their journey through a unique memory system.","title":"\ud83c\udfaf Vision"},{"location":"ROADMAP/#phase-1-core-systems-current-sprint","text":"","title":"\ud83d\uddfa\ufe0f Phase 1: Core Systems (Current Sprint)"},{"location":"ROADMAP/#garden-environment","text":"[x] Basic garden scene setup [x] Biome system (Light Meadow, Shadow Garden, Void Basin) [x] Dynamic terrain generation [ ] Weather system [ ] Day/night cycle [ ] Seasonal changes","title":"Garden Environment"},{"location":"ROADMAP/#plant-system","text":"[x] Basic plant growth mechanics [x] Plant visualization [ ] Advanced plant mutations [ ] Cross-pollination system [ ] Plant disease system [ ] Plant care mechanics [ ] Plant lifecycle events","title":"Plant System"},{"location":"ROADMAP/#ritual-system","text":"[x] Basic ritual mechanics [x] Ritual visualization [ ] Advanced ritual types [ ] Group rituals [ ] Ritual rewards [ ] Ritual progression [ ] Ritual customization","title":"Ritual System"},{"location":"ROADMAP/#memory-system","text":"[x] Basic memory storage [x] Memory visualization [ ] Memory effects [ ] Memory sharing [ ] Memory preservation [ ] Memory categories [ ] Memory search","title":"Memory System"},{"location":"ROADMAP/#uiux","text":"[x] Main menu [x] Settings menu [x] Memory viewer [ ] Plant viewer [ ] Ritual interface [ ] Emotion tracker [ ] Progress dashboard","title":"UI/UX"},{"location":"ROADMAP/#phase-2-environment-atmosphere","text":"","title":"\ud83d\uddfa\ufe0f Phase 2: Environment &amp; Atmosphere"},{"location":"ROADMAP/#garden-environment_1","text":"[x] Basic garden layout [ ] Dynamic weather system [ ] Day/night cycle [ ] Seasonal changes [ ] Ambient effects [ ] Sound design [ ] Particle systems","title":"Garden Environment"},{"location":"ROADMAP/#biomes","text":"[x] Light Meadow [x] Shadow Garden [x] Void Basin [ ] Biome transitions [ ] Biome-specific plants [ ] Biome effects [ ] Biome interactions","title":"Biomes"},{"location":"ROADMAP/#phase-3-social-features","text":"","title":"\ud83d\uddfa\ufe0f Phase 3: Social Features"},{"location":"ROADMAP/#multiplayer","text":"[ ] Player interactions [ ] Garden sharing [ ] Plant trading [ ] Ritual collaboration [ ] Memory sharing [ ] Friend system [ ] Chat system","title":"Multiplayer"},{"location":"ROADMAP/#community","text":"[ ] Leaderboards [ ] Achievements [ ] Events [ ] Challenges [ ] Community garden [ ] Player profiles [ ] Social features","title":"Community"},{"location":"ROADMAP/#phase-4-advanced-features","text":"","title":"\ud83d\uddfa\ufe0f Phase 4: Advanced Features"},{"location":"ROADMAP/#emotional-intelligence","text":"[ ] Emotion tracking [ ] Mood analysis [ ] Emotional patterns [ ] Personal insights [ ] Growth tracking [ ] Progress visualization [ ] Recommendations","title":"Emotional Intelligence"},{"location":"ROADMAP/#progression-system","text":"[ ] Player levels [ ] Skill trees [ ] Unlockables [ ] Achievements [ ] Rewards [ ] Challenges [ ] Milestones","title":"Progression System"},{"location":"ROADMAP/#phase-5-polish-optimization","text":"","title":"\ud83d\uddfa\ufe0f Phase 5: Polish &amp; Optimization"},{"location":"ROADMAP/#performance","text":"[ ] Code optimization [ ] Memory management [ ] Network optimization [ ] Load times [ ] Asset optimization [ ] Caching system [ ] Error handling","title":"Performance"},{"location":"ROADMAP/#quality-of-life","text":"[ ] Tutorial system [ ] Help documentation [ ] Accessibility features [ ] UI improvements [ ] Bug fixes [ ] User feedback [ ] Analytics","title":"Quality of Life"},{"location":"ROADMAP/#phase-6-expansion","text":"","title":"\ud83d\uddfa\ufe0f Phase 6: Expansion"},{"location":"ROADMAP/#content","text":"[ ] New plant types [ ] New rituals [ ] New biomes [ ] New memories [ ] New effects [ ] New features [ ] Seasonal content","title":"Content"},{"location":"ROADMAP/#monetization","text":"[ ] Premium features [ ] Cosmetic items [ ] Special plants [ ] Custom effects [ ] Garden themes [ ] Memory packs [ ] Ritual packs","title":"Monetization"},{"location":"ROADMAP/#current-sprint-goals-2-weeks","text":"","title":"\ud83d\udcca Current Sprint Goals (2 Weeks)"},{"location":"ROADMAP/#week-1-core-systems-enhancement","text":"Plant System Implement plant mutations Add cross-pollination mechanics Create plant disease system Ritual System Add advanced ritual types Implement group ritual mechanics Create ritual combinations Memory System Add memory categories Implement memory effects Create memory persistence","title":"Week 1: Core Systems Enhancement"},{"location":"ROADMAP/#week-2-environment-ui","text":"Garden Environment Implement weather system Add day/night cycle Create seasonal changes UI Improvements Enhance plant interaction UI Improve ritual visualization Update memory viewing interface Performance & Polish Optimize memory system Improve visual effects Add sound effects","title":"Week 2: Environment &amp; UI"},{"location":"ROADMAP/#success-metrics","text":"User engagement metrics Emotional impact measurements System performance indicators User feedback scores Community growth rates","title":"\ud83c\udfaf Success Metrics"},{"location":"ROADMAP/#development-process","text":"Planning Feature prioritization Technical design Resource allocation Development Agile sprints Code reviews Testing Review User testing Performance analysis Feedback integration Iteration Feature refinement Bug fixes Performance optimization","title":"\ud83d\udd04 Development Process"},{"location":"ROADMAP/#future-considerations","text":"Research partnerships Community building Platform expansion Monetization strategy Long-term sustainability","title":"\ud83d\udcc8 Future Considerations"},{"location":"ROADMAP/#game-design-principles","text":"Emotional Impact Meaningful interactions Personal growth Therapeutic value Accessibility Easy to learn Inclusive design Multiple play styles Engagement Daily activities Long-term progression Social features Innovation Unique mechanics Emotional intelligence Adaptive systems","title":"\ud83c\udfae Game Design Principles"},{"location":"ROADMAP/#technical-considerations","text":"Performance Memory optimization Network efficiency Cross-platform compatibility Security Data protection User privacy Safe interactions Scalability Growing user base Feature expansion Platform support","title":"\ud83d\udd27 Technical Considerations"},{"location":"ROADMAP/#next-steps","text":"Complete current sprint goals Gather user feedback Plan next sprint Review and adjust roadmap Prepare for Phase 2","title":"\ud83c\udfaf Next Steps"},{"location":"SPRINT_PLAN/","text":"NeuroBloom Sprint Plan Sprint Duration: 2 Weeks Start Date: [Current Date] End Date: [Current Date + 14 days] \ud83c\udfaf Sprint Goals Enhance core systems (Plant, Ritual, Memory) Improve environment and UI Optimize performance and add polish \ud83d\udccb Sprint Backlog 1. Plant System Enhancements Plant Mutations [ ] Create mutation system [ ] Implement mutation triggers [ ] Add visual effects for mutations [ ] Create mutation UI [ ] Test mutation mechanics Cross-Pollination [ ] Design pollination mechanics [ ] Implement plant interaction [ ] Create hybrid plant types [ ] Add pollination effects [ ] Test pollination system Plant Diseases [ ] Design disease system [ ] Implement disease spread [ ] Create healing mechanics [ ] Add disease visuals [ ] Test disease system 2. Ritual System Improvements Advanced Rituals [ ] Design new ritual types [ ] Implement ritual mechanics [ ] Create ritual UI [ ] Add ritual effects [ ] Test new rituals Group Rituals [ ] Design group mechanics [ ] Implement synchronization [ ] Create group UI [ ] Add group effects [ ] Test group features Ritual Combinations [ ] Design combination system [ ] Implement combination logic [ ] Create combination UI [ ] Add combination effects [ ] Test combinations 3. Memory System Updates Memory Categories [ ] Design category system [ ] Implement categorization [ ] Create category UI [ ] Add category filters [ ] Test categories Memory Effects [ ] Design effect system [ ] Implement visual effects [ ] Create audio effects [ ] Add interaction effects [ ] Test effects Memory Persistence [ ] Design persistence system [ ] Implement data storage [ ] Create save/load system [ ] Add cloud sync [ ] Test persistence 4. Environment Updates Weather System [ ] Design weather system [ ] Implement weather effects [ ] Create weather UI [ ] Add weather transitions [ ] Test weather system Day/Night Cycle [ ] Design cycle system [ ] Implement lighting changes [ ] Create time UI [ ] Add cycle effects [ ] Test day/night system Seasonal Changes [ ] Design season system [ ] Implement seasonal effects [ ] Create season UI [ ] Add season transitions [ ] Test season system 5. UI Improvements Plant Interaction [ ] Design interaction UI [ ] Implement interaction system [ ] Create feedback effects [ ] Add tutorial elements [ ] Test interactions Ritual Visualization [ ] Design ritual UI [ ] Implement progress display [ ] Create effect visuals [ ] Add feedback system [ ] Test visualization Memory Viewing [ ] Design memory UI [ ] Implement viewing system [ ] Create navigation [ ] Add sharing features [ ] Test memory UI 6. Performance & Polish Memory Optimization [ ] Profile memory usage [ ] Optimize data structures [ ] Implement caching [ ] Add cleanup routines [ ] Test performance Visual Effects [ ] Review current effects [ ] Optimize particle systems [ ] Enhance lighting [ ] Add new effects [ ] Test visuals Sound Effects [ ] Design sound system [ ] Implement audio mixing [ ] Create new sounds [ ] Add spatial audio [ ] Test audio system \ud83d\udcca Daily Tasks Week 1 Monday [ ] Start plant mutation system [ ] Begin advanced ritual design [ ] Plan memory categories Tuesday [ ] Implement mutation mechanics [ ] Create new ritual types [ ] Design category system Wednesday [ ] Add mutation visuals [ ] Implement group rituals [ ] Create category UI Thursday [ ] Test mutation system [ ] Add ritual combinations [ ] Implement memory effects Friday [ ] Review and refine [ ] Fix any issues [ ] Prepare for week 2 Week 2 Monday [ ] Start weather system [ ] Begin UI improvements [ ] Plan performance optimizations Tuesday [ ] Implement day/night cycle [ ] Enhance plant interaction UI [ ] Profile memory usage Wednesday [ ] Add seasonal changes [ ] Improve ritual visualization [ ] Optimize data structures Thursday [ ] Create new visual effects [ ] Update memory viewing UI [ ] Implement sound system Friday [ ] Final testing [ ] Bug fixes [ ] Sprint review \ud83c\udfaf Definition of Done Code is written and documented Unit tests are passing Integration tests are complete UI is implemented and styled Performance meets requirements No known bugs Code review completed Documentation updated \ud83d\udcc8 Success Criteria All planned features implemented Performance metrics met No critical bugs Positive user feedback Documentation complete \ud83d\udd04 Daily Standup Time: [Team's preferred time] Duration: 15 minutes Topics: What was done yesterday? What will be done today? Any blockers? \ud83d\udcdd Sprint Review Time: [End of sprint] Duration: 1 hour Topics: Sprint goals review Demo new features Discuss challenges Plan next sprint \ud83c\udfaf Next Steps Begin implementation of plant mutations Start advanced ritual design Plan memory system updates Prepare environment improvements Begin UI enhancements","title":"NeuroBloom Sprint Plan"},{"location":"SPRINT_PLAN/#neurobloom-sprint-plan","text":"","title":"NeuroBloom Sprint Plan"},{"location":"SPRINT_PLAN/#sprint-duration-2-weeks","text":"","title":"Sprint Duration: 2 Weeks"},{"location":"SPRINT_PLAN/#start-date-current-date","text":"","title":"Start Date: [Current Date]"},{"location":"SPRINT_PLAN/#end-date-current-date-14-days","text":"","title":"End Date: [Current Date + 14 days]"},{"location":"SPRINT_PLAN/#sprint-goals","text":"Enhance core systems (Plant, Ritual, Memory) Improve environment and UI Optimize performance and add polish","title":"\ud83c\udfaf Sprint Goals"},{"location":"SPRINT_PLAN/#sprint-backlog","text":"","title":"\ud83d\udccb Sprint Backlog"},{"location":"SPRINT_PLAN/#1-plant-system-enhancements","text":"","title":"1. Plant System Enhancements"},{"location":"SPRINT_PLAN/#plant-mutations","text":"[ ] Create mutation system [ ] Implement mutation triggers [ ] Add visual effects for mutations [ ] Create mutation UI [ ] Test mutation mechanics","title":"Plant Mutations"},{"location":"SPRINT_PLAN/#cross-pollination","text":"[ ] Design pollination mechanics [ ] Implement plant interaction [ ] Create hybrid plant types [ ] Add pollination effects [ ] Test pollination system","title":"Cross-Pollination"},{"location":"SPRINT_PLAN/#plant-diseases","text":"[ ] Design disease system [ ] Implement disease spread [ ] Create healing mechanics [ ] Add disease visuals [ ] Test disease system","title":"Plant Diseases"},{"location":"SPRINT_PLAN/#2-ritual-system-improvements","text":"","title":"2. Ritual System Improvements"},{"location":"SPRINT_PLAN/#advanced-rituals","text":"[ ] Design new ritual types [ ] Implement ritual mechanics [ ] Create ritual UI [ ] Add ritual effects [ ] Test new rituals","title":"Advanced Rituals"},{"location":"SPRINT_PLAN/#group-rituals","text":"[ ] Design group mechanics [ ] Implement synchronization [ ] Create group UI [ ] Add group effects [ ] Test group features","title":"Group Rituals"},{"location":"SPRINT_PLAN/#ritual-combinations","text":"[ ] Design combination system [ ] Implement combination logic [ ] Create combination UI [ ] Add combination effects [ ] Test combinations","title":"Ritual Combinations"},{"location":"SPRINT_PLAN/#3-memory-system-updates","text":"","title":"3. Memory System Updates"},{"location":"SPRINT_PLAN/#memory-categories","text":"[ ] Design category system [ ] Implement categorization [ ] Create category UI [ ] Add category filters [ ] Test categories","title":"Memory Categories"},{"location":"SPRINT_PLAN/#memory-effects","text":"[ ] Design effect system [ ] Implement visual effects [ ] Create audio effects [ ] Add interaction effects [ ] Test effects","title":"Memory Effects"},{"location":"SPRINT_PLAN/#memory-persistence","text":"[ ] Design persistence system [ ] Implement data storage [ ] Create save/load system [ ] Add cloud sync [ ] Test persistence","title":"Memory Persistence"},{"location":"SPRINT_PLAN/#4-environment-updates","text":"","title":"4. Environment Updates"},{"location":"SPRINT_PLAN/#weather-system","text":"[ ] Design weather system [ ] Implement weather effects [ ] Create weather UI [ ] Add weather transitions [ ] Test weather system","title":"Weather System"},{"location":"SPRINT_PLAN/#daynight-cycle","text":"[ ] Design cycle system [ ] Implement lighting changes [ ] Create time UI [ ] Add cycle effects [ ] Test day/night system","title":"Day/Night Cycle"},{"location":"SPRINT_PLAN/#seasonal-changes","text":"[ ] Design season system [ ] Implement seasonal effects [ ] Create season UI [ ] Add season transitions [ ] Test season system","title":"Seasonal Changes"},{"location":"SPRINT_PLAN/#5-ui-improvements","text":"","title":"5. UI Improvements"},{"location":"SPRINT_PLAN/#plant-interaction","text":"[ ] Design interaction UI [ ] Implement interaction system [ ] Create feedback effects [ ] Add tutorial elements [ ] Test interactions","title":"Plant Interaction"},{"location":"SPRINT_PLAN/#ritual-visualization","text":"[ ] Design ritual UI [ ] Implement progress display [ ] Create effect visuals [ ] Add feedback system [ ] Test visualization","title":"Ritual Visualization"},{"location":"SPRINT_PLAN/#memory-viewing","text":"[ ] Design memory UI [ ] Implement viewing system [ ] Create navigation [ ] Add sharing features [ ] Test memory UI","title":"Memory Viewing"},{"location":"SPRINT_PLAN/#6-performance-polish","text":"","title":"6. Performance &amp; Polish"},{"location":"SPRINT_PLAN/#memory-optimization","text":"[ ] Profile memory usage [ ] Optimize data structures [ ] Implement caching [ ] Add cleanup routines [ ] Test performance","title":"Memory Optimization"},{"location":"SPRINT_PLAN/#visual-effects","text":"[ ] Review current effects [ ] Optimize particle systems [ ] Enhance lighting [ ] Add new effects [ ] Test visuals","title":"Visual Effects"},{"location":"SPRINT_PLAN/#sound-effects","text":"[ ] Design sound system [ ] Implement audio mixing [ ] Create new sounds [ ] Add spatial audio [ ] Test audio system","title":"Sound Effects"},{"location":"SPRINT_PLAN/#daily-tasks","text":"","title":"\ud83d\udcca Daily Tasks"},{"location":"SPRINT_PLAN/#week-1","text":"","title":"Week 1"},{"location":"SPRINT_PLAN/#monday","text":"[ ] Start plant mutation system [ ] Begin advanced ritual design [ ] Plan memory categories","title":"Monday"},{"location":"SPRINT_PLAN/#tuesday","text":"[ ] Implement mutation mechanics [ ] Create new ritual types [ ] Design category system","title":"Tuesday"},{"location":"SPRINT_PLAN/#wednesday","text":"[ ] Add mutation visuals [ ] Implement group rituals [ ] Create category UI","title":"Wednesday"},{"location":"SPRINT_PLAN/#thursday","text":"[ ] Test mutation system [ ] Add ritual combinations [ ] Implement memory effects","title":"Thursday"},{"location":"SPRINT_PLAN/#friday","text":"[ ] Review and refine [ ] Fix any issues [ ] Prepare for week 2","title":"Friday"},{"location":"SPRINT_PLAN/#week-2","text":"","title":"Week 2"},{"location":"SPRINT_PLAN/#monday_1","text":"[ ] Start weather system [ ] Begin UI improvements [ ] Plan performance optimizations","title":"Monday"},{"location":"SPRINT_PLAN/#tuesday_1","text":"[ ] Implement day/night cycle [ ] Enhance plant interaction UI [ ] Profile memory usage","title":"Tuesday"},{"location":"SPRINT_PLAN/#wednesday_1","text":"[ ] Add seasonal changes [ ] Improve ritual visualization [ ] Optimize data structures","title":"Wednesday"},{"location":"SPRINT_PLAN/#thursday_1","text":"[ ] Create new visual effects [ ] Update memory viewing UI [ ] Implement sound system","title":"Thursday"},{"location":"SPRINT_PLAN/#friday_1","text":"[ ] Final testing [ ] Bug fixes [ ] Sprint review","title":"Friday"},{"location":"SPRINT_PLAN/#definition-of-done","text":"Code is written and documented Unit tests are passing Integration tests are complete UI is implemented and styled Performance meets requirements No known bugs Code review completed Documentation updated","title":"\ud83c\udfaf Definition of Done"},{"location":"SPRINT_PLAN/#success-criteria","text":"All planned features implemented Performance metrics met No critical bugs Positive user feedback Documentation complete","title":"\ud83d\udcc8 Success Criteria"},{"location":"SPRINT_PLAN/#daily-standup","text":"Time: [Team's preferred time] Duration: 15 minutes Topics: What was done yesterday? What will be done today? Any blockers?","title":"\ud83d\udd04 Daily Standup"},{"location":"SPRINT_PLAN/#sprint-review","text":"Time: [End of sprint] Duration: 1 hour Topics: Sprint goals review Demo new features Discuss challenges Plan next sprint","title":"\ud83d\udcdd Sprint Review"},{"location":"SPRINT_PLAN/#next-steps","text":"Begin implementation of plant mutations Start advanced ritual design Plan memory system updates Prepare environment improvements Begin UI enhancements","title":"\ud83c\udfaf Next Steps"},{"location":"SYSTEMS/","text":"Core Systems Documentation This document provides detailed information about the core systems in NeuroBloom. Plant System Overview The plant system is the heart of NeuroBloom, allowing players to cultivate emotional plants that respond to their feelings and actions. Components PlantVisuals Module Location : ServerScriptService/Modules/PlantVisuals.lua Purpose : Handles visual representation of plants Features : Growth stage animations Emotional state visualization Particle effects Bioluminescence Plant Types Joy Plants Bright, vibrant colors Upward growth patterns Gentle particle effects Grief Plants Deep, rich colors Flowing, downward patterns Soft, misty particles Hope Plants Light, airy appearance Spiral growth patterns Sparkling effects Growth Mechanics Stages : Seed Sprout Bud Bloom Mature Growth Factors : Emotional input Ritual completion Time spent Environmental conditions Sound System Overview The sound system provides an immersive audio experience that adapts to the player's actions and emotional state. Components SoundSystem Module Location : ServerScriptService/Modules/SoundSystem.lua Purpose : Manages all game audio Features : Dynamic music system Ambient soundscapes Interactive sound effects Volume controls Sound Categories Ambient Sounds Biome-specific backgrounds Weather effects Environmental sounds Music Dynamic soundtrack Emotional themes Transition effects Effects Plant interactions Ritual sounds UI feedback Volume Control Master volume Music volume Ambient volume Effects volume Ritual System Overview The ritual system provides structured emotional exercises and interactions with the garden. Components GardenRituals Module Location : ServerScriptService/Modules/GardenRituals.lua Purpose : Manages ritual mechanics Features : Guided exercises Progress tracking Emotional input Visual feedback Ritual Types Breathing Ritual Guided breathing exercises Visual feedback Sound integration Whisper Ritual Plant communication Emotional sharing Memory creation UI Integration Progress tracking Visual guides Emotional input Completion rewards Settings System Overview The settings system provides user control over various game aspects. Components SettingsUI Module Location : StarterGui/SettingsUI.lua Purpose : Manages user preferences Features : Sound controls Graphics settings Accessibility options User preferences Settings Categories Audio Settings Volume controls Sound categories Mute options Graphics Settings Quality levels Visual effects Performance options Accessibility Subtitles Color options Input preferences Resonance Warfare System Overview Allows players to engage in battles driven by emotional resonance. Components ResonanceWarfareSystem Module Battle initiation events Winner calculation based on emotions Garden Expansion System Overview Expands the playable garden with new plots and special features. Components GardenExpansionSystem Module Expansion history tracking Visual updates through GardenScene Grand Theft Lux Integration System Overview Bridges lux heist mechanics with Grand Theft Lux. Components GrandTheftLuxIntegration Module Remote events StartLuxHeist and CompleteLuxHeist Technical Implementation Service Structure ServerScriptService/ \u251c\u2500\u2500 Modules/ \u2502 \u251c\u2500\u2500 PlantVisuals.lua \u2502 \u251c\u2500\u2500 SoundSystem.lua \u2502 \u2514\u2500\u2500 GardenRituals.lua \u251c\u2500\u2500 init.server.lua \u2514\u2500\u2500 GardenScene.lua StarterGui/ \u251c\u2500\u2500 MainMenu.lua \u251c\u2500\u2500 RitualUI.lua \u2514\u2500\u2500 SettingsUI.lua StarterPlayerScripts/ \u2514\u2500\u2500 init.client.lua Module Dependencies PlantVisuals \u2192 SoundSystem GardenRituals \u2192 PlantVisuals SettingsUI \u2192 SoundSystem Event System Plant growth events Ritual completion events Settings change events Emotional state events Performance Considerations Optimization Particle effect limits Sound instance management UI element pooling Event connection cleanup Memory Management Asset loading/unloading Instance cleanup Event disconnection Cache management Security Data Protection Player data encryption Secure communication Access control Input validation Anti-Exploit Script injection prevention Resource protection Rate limiting Validation checks Future Development Planned Features Advanced plant genetics More ritual types Enhanced sound system Additional biomes Technical Improvements Performance optimization Memory management Network efficiency Code modularity","title":"Core Systems Documentation"},{"location":"SYSTEMS/#core-systems-documentation","text":"This document provides detailed information about the core systems in NeuroBloom.","title":"Core Systems Documentation"},{"location":"SYSTEMS/#plant-system","text":"","title":"Plant System"},{"location":"SYSTEMS/#overview","text":"The plant system is the heart of NeuroBloom, allowing players to cultivate emotional plants that respond to their feelings and actions.","title":"Overview"},{"location":"SYSTEMS/#components","text":"","title":"Components"},{"location":"SYSTEMS/#plantvisuals-module","text":"Location : ServerScriptService/Modules/PlantVisuals.lua Purpose : Handles visual representation of plants Features : Growth stage animations Emotional state visualization Particle effects Bioluminescence","title":"PlantVisuals Module"},{"location":"SYSTEMS/#plant-types","text":"Joy Plants Bright, vibrant colors Upward growth patterns Gentle particle effects Grief Plants Deep, rich colors Flowing, downward patterns Soft, misty particles Hope Plants Light, airy appearance Spiral growth patterns Sparkling effects","title":"Plant Types"},{"location":"SYSTEMS/#growth-mechanics","text":"Stages : Seed Sprout Bud Bloom Mature Growth Factors : Emotional input Ritual completion Time spent Environmental conditions","title":"Growth Mechanics"},{"location":"SYSTEMS/#sound-system","text":"","title":"Sound System"},{"location":"SYSTEMS/#overview_1","text":"The sound system provides an immersive audio experience that adapts to the player's actions and emotional state.","title":"Overview"},{"location":"SYSTEMS/#components_1","text":"","title":"Components"},{"location":"SYSTEMS/#soundsystem-module","text":"Location : ServerScriptService/Modules/SoundSystem.lua Purpose : Manages all game audio Features : Dynamic music system Ambient soundscapes Interactive sound effects Volume controls","title":"SoundSystem Module"},{"location":"SYSTEMS/#sound-categories","text":"Ambient Sounds Biome-specific backgrounds Weather effects Environmental sounds Music Dynamic soundtrack Emotional themes Transition effects Effects Plant interactions Ritual sounds UI feedback","title":"Sound Categories"},{"location":"SYSTEMS/#volume-control","text":"Master volume Music volume Ambient volume Effects volume","title":"Volume Control"},{"location":"SYSTEMS/#ritual-system","text":"","title":"Ritual System"},{"location":"SYSTEMS/#overview_2","text":"The ritual system provides structured emotional exercises and interactions with the garden.","title":"Overview"},{"location":"SYSTEMS/#components_2","text":"","title":"Components"},{"location":"SYSTEMS/#gardenrituals-module","text":"Location : ServerScriptService/Modules/GardenRituals.lua Purpose : Manages ritual mechanics Features : Guided exercises Progress tracking Emotional input Visual feedback","title":"GardenRituals Module"},{"location":"SYSTEMS/#ritual-types","text":"Breathing Ritual Guided breathing exercises Visual feedback Sound integration Whisper Ritual Plant communication Emotional sharing Memory creation","title":"Ritual Types"},{"location":"SYSTEMS/#ui-integration","text":"Progress tracking Visual guides Emotional input Completion rewards","title":"UI Integration"},{"location":"SYSTEMS/#settings-system","text":"","title":"Settings System"},{"location":"SYSTEMS/#overview_3","text":"The settings system provides user control over various game aspects.","title":"Overview"},{"location":"SYSTEMS/#components_3","text":"","title":"Components"},{"location":"SYSTEMS/#settingsui-module","text":"Location : StarterGui/SettingsUI.lua Purpose : Manages user preferences Features : Sound controls Graphics settings Accessibility options User preferences","title":"SettingsUI Module"},{"location":"SYSTEMS/#settings-categories","text":"Audio Settings Volume controls Sound categories Mute options Graphics Settings Quality levels Visual effects Performance options Accessibility Subtitles Color options Input preferences","title":"Settings Categories"},{"location":"SYSTEMS/#resonance-warfare-system","text":"","title":"Resonance Warfare System"},{"location":"SYSTEMS/#overview_4","text":"Allows players to engage in battles driven by emotional resonance.","title":"Overview"},{"location":"SYSTEMS/#components_4","text":"ResonanceWarfareSystem Module Battle initiation events Winner calculation based on emotions","title":"Components"},{"location":"SYSTEMS/#garden-expansion-system","text":"","title":"Garden Expansion System"},{"location":"SYSTEMS/#overview_5","text":"Expands the playable garden with new plots and special features.","title":"Overview"},{"location":"SYSTEMS/#components_5","text":"GardenExpansionSystem Module Expansion history tracking Visual updates through GardenScene","title":"Components"},{"location":"SYSTEMS/#grand-theft-lux-integration-system","text":"","title":"Grand Theft Lux Integration System"},{"location":"SYSTEMS/#overview_6","text":"Bridges lux heist mechanics with Grand Theft Lux.","title":"Overview"},{"location":"SYSTEMS/#components_6","text":"GrandTheftLuxIntegration Module Remote events StartLuxHeist and CompleteLuxHeist","title":"Components"},{"location":"SYSTEMS/#technical-implementation","text":"","title":"Technical Implementation"},{"location":"SYSTEMS/#service-structure","text":"ServerScriptService/ \u251c\u2500\u2500 Modules/ \u2502 \u251c\u2500\u2500 PlantVisuals.lua \u2502 \u251c\u2500\u2500 SoundSystem.lua \u2502 \u2514\u2500\u2500 GardenRituals.lua \u251c\u2500\u2500 init.server.lua \u2514\u2500\u2500 GardenScene.lua StarterGui/ \u251c\u2500\u2500 MainMenu.lua \u251c\u2500\u2500 RitualUI.lua \u2514\u2500\u2500 SettingsUI.lua StarterPlayerScripts/ \u2514\u2500\u2500 init.client.lua","title":"Service Structure"},{"location":"SYSTEMS/#module-dependencies","text":"PlantVisuals \u2192 SoundSystem GardenRituals \u2192 PlantVisuals SettingsUI \u2192 SoundSystem","title":"Module Dependencies"},{"location":"SYSTEMS/#event-system","text":"Plant growth events Ritual completion events Settings change events Emotional state events","title":"Event System"},{"location":"SYSTEMS/#performance-considerations","text":"","title":"Performance Considerations"},{"location":"SYSTEMS/#optimization","text":"Particle effect limits Sound instance management UI element pooling Event connection cleanup","title":"Optimization"},{"location":"SYSTEMS/#memory-management","text":"Asset loading/unloading Instance cleanup Event disconnection Cache management","title":"Memory Management"},{"location":"SYSTEMS/#security","text":"","title":"Security"},{"location":"SYSTEMS/#data-protection","text":"Player data encryption Secure communication Access control Input validation","title":"Data Protection"},{"location":"SYSTEMS/#anti-exploit","text":"Script injection prevention Resource protection Rate limiting Validation checks","title":"Anti-Exploit"},{"location":"SYSTEMS/#future-development","text":"","title":"Future Development"},{"location":"SYSTEMS/#planned-features","text":"Advanced plant genetics More ritual types Enhanced sound system Additional biomes","title":"Planned Features"},{"location":"SYSTEMS/#technical-improvements","text":"Performance optimization Memory management Network efficiency Code modularity","title":"Technical Improvements"},{"location":"TECHNICAL_DESIGN/","text":"NeuroBloom Technical Design Document \ud83c\udfaf Overview This document outlines the technical design for upcoming NeuroBloom features, focusing on the current sprint's goals and implementation details. \ud83d\udccb Core Systems Enhancement 1. Plant System Plant Mutations -- PlantMutationSystem.lua local PlantMutationSystem = { MUTATION_TYPES = { COLOR = \"ColorMutation\", SHAPE = \"ShapeMutation\", EFFECT = \"EffectMutation\", HYBRID = \"HybridMutation\" }, MUTATION_TRIGGERS = { EMOTIONAL = \"EmotionalTrigger\", ENVIRONMENTAL = \"EnvironmentalTrigger\", INTERACTION = \"InteractionTrigger\", TIME = \"TimeTrigger\" } } function PlantMutationSystem.createMutation(plant, type, trigger) -- Implementation end function PlantMutationSystem.applyMutation(plant, mutation) -- Implementation end function PlantMutationSystem.revertMutation(plant, mutation) -- Implementation end Cross-Pollination -- CrossPollinationSystem.lua local CrossPollinationSystem = { POLLINATION_TYPES = { WIND = \"WindPollination\", INSECT = \"InsectPollination\", MANUAL = \"ManualPollination\" }, HYBRID_TYPES = { JOY_PEACE = \"JoyPeaceHybrid\", HOPE_GRIEF = \"HopeGriefHybrid\", CUSTOM = \"CustomHybrid\" } } function CrossPollinationSystem.initiatePollination(plant1, plant2, type) -- Implementation end function CrossPollinationSystem.createHybrid(plant1, plant2) -- Implementation end function CrossPollinationSystem.applyHybridTraits(hybrid, traits) -- Implementation end Plant Diseases -- PlantDiseaseSystem.lua local PlantDiseaseSystem = { DISEASE_TYPES = { FUNGAL = \"FungalDisease\", VIRAL = \"ViralDisease\", NUTRITIONAL = \"NutritionalDisease\" }, HEALING_METHODS = { RITUAL = \"RitualHealing\", MEDICINE = \"MedicineHealing\", NATURAL = \"NaturalHealing\" } } function PlantDiseaseSystem.detectDisease(plant) -- Implementation end function PlantDiseaseSystem.spreadDisease(disease, plants) -- Implementation end function PlantDiseaseSystem.healDisease(plant, method) -- Implementation end 2. Ritual System Advanced Rituals -- AdvancedRitualSystem.lua local AdvancedRitualSystem = { RITUAL_TYPES = { HEALING = \"HealingRitual\", GROWTH = \"GrowthRitual\", TRANSFORMATION = \"TransformationRitual\" }, RITUAL_COMPONENTS = { GESTURES = \"Gestures\", CHANTS = \"Chants\", OFFERINGS = \"Offerings\", SYMBOLS = \"Symbols\" } } function AdvancedRitualSystem.createRitual(type, components) -- Implementation end function AdvancedRitualSystem.performRitual(ritual, participants) -- Implementation end function AdvancedRitualSystem.calculateOutcome(ritual, emotions) -- Implementation end Group Rituals -- GroupRitualSystem.lua local GroupRitualSystem = { SYNC_TYPES = { EMOTIONAL = \"EmotionalSync\", MOVEMENT = \"MovementSync\", RHYTHM = \"RhythmSync\" }, GROUP_SIZES = { SMALL = 2, MEDIUM = 4, LARGE = 8 } } function GroupRitualSystem.synchronizeParticipants(ritual, participants) -- Implementation end function GroupRitualSystem.calculateGroupEnergy(participants) -- Implementation end function GroupRitualSystem.distributeRewards(ritual, participants) -- Implementation end 3. Memory System Memory Categories -- MemoryCategorySystem.lua local MemoryCategorySystem = { CATEGORIES = { PERSONAL = \"PersonalMemory\", SHARED = \"SharedMemory\", RITUAL = \"RitualMemory\", PLANT = \"PlantMemory\" }, TAGS = { EMOTIONAL = \"EmotionalTag\", SEASONAL = \"SeasonalTag\", SPECIAL = \"SpecialTag\" } } function MemoryCategorySystem.categorizeMemory(memory, category) -- Implementation end function MemoryCategorySystem.addTags(memory, tags) -- Implementation end function MemoryCategorySystem.filterMemories(category, tags) -- Implementation end Memory Effects -- MemoryEffectSystem.lua local MemoryEffectSystem = { EFFECT_TYPES = { VISUAL = \"VisualEffect\", AUDIO = \"AudioEffect\", EMOTIONAL = \"EmotionalEffect\", ENVIRONMENTAL = \"EnvironmentalEffect\" } } function MemoryEffectSystem.applyEffect(memory, effectType) -- Implementation end function MemoryEffectSystem.calculateIntensity(memory, effectType) -- Implementation end function MemoryEffectSystem.blendEffects(effects) -- Implementation end Memory Persistence -- MemoryPersistenceSystem.lua local MemoryPersistenceSystem = { STORAGE_TYPES = { LOCAL = \"LocalStorage\", CLOUD = \"CloudStorage\", HYBRID = \"HybridStorage\" } } function MemoryPersistenceSystem.saveMemory(memory, storageType) -- Implementation end function MemoryPersistenceSystem.loadMemory(memoryId, storageType) -- Implementation end function MemoryPersistenceSystem.syncMemories() -- Implementation end \ud83d\udcca Data Structures Plant Data local PlantData = { id = \"string\", type = \"string\", growthStage = \"number\", emotions = { JOY = \"number\", PEACE = \"number\", HOPE = \"number\", GRIEF = \"number\" }, mutations = { active = \"table\", history = \"table\" }, diseases = { active = \"table\", history = \"table\" }, pollination = { partners = \"table\", hybrids = \"table\" } } Ritual Data local RitualData = { id = \"string\", type = \"string\", participants = \"table\", components = \"table\", progress = \"number\", emotions = { JOY = \"number\", PEACE = \"number\", HOPE = \"number\", GRIEF = \"number\" }, rewards = \"table\" } Memory Data local MemoryData = { id = \"string\", type = \"string\", category = \"string\", tags = \"table\", emotions = { JOY = \"number\", PEACE = \"number\", HOPE = \"number\", GRIEF = \"number\" }, effects = \"table\", persistence = { storage = \"string\", lastSync = \"number\" } } \ud83d\udd04 Event System Event Types local Events = { PLANT = { MUTATED = \"PlantMutated\", POLLINATED = \"PlantPollinated\", DISEASED = \"PlantDiseased\", HEALED = \"PlantHealed\" }, RITUAL = { STARTED = \"RitualStarted\", PROGRESS = \"RitualProgress\", COMPLETED = \"RitualCompleted\", FAILED = \"RitualFailed\" }, MEMORY = { CREATED = \"MemoryCreated\", UPDATED = \"MemoryUpdated\", SHARED = \"MemoryShared\", EFFECTED = \"MemoryEffected\" } } \ud83c\udfa8 UI Components Plant Interaction UI local PlantInteractionUI = { components = { infoPanel = \"Frame\", emotionDisplay = \"Frame\", mutationControls = \"Frame\", diseaseStatus = \"Frame\" }, states = { NORMAL = \"NormalState\", MUTATING = \"MutatingState\", DISEASED = \"DiseasedState\", HEALING = \"HealingState\" } } Ritual UI local RitualUI = { components = { progressBar = \"Frame\", emotionInput = \"Frame\", componentDisplay = \"Frame\", participantList = \"Frame\" }, states = { PREPARING = \"PreparingState\", ACTIVE = \"ActiveState\", COMPLETING = \"CompletingState\" } } Memory UI local MemoryUI = { components = { memoryList = \"Frame\", categoryFilter = \"Frame\", effectDisplay = \"Frame\", sharingControls = \"Frame\" }, states = { VIEWING = \"ViewingState\", EDITING = \"EditingState\", SHARING = \"SharingState\" } } \ud83d\udd27 Performance Considerations Memory Optimization Implement object pooling for frequently created objects Use weak tables for temporary references Implement cleanup routines for unused resources Cache frequently accessed data Use efficient data structures Network Optimization Implement delta compression for state updates Use efficient serialization for data transfer Implement client-side prediction Use reliable and unreliable channels appropriately Implement rate limiting Rendering Optimization Use LOD (Level of Detail) for distant objects Implement occlusion culling Use efficient particle systems Implement texture atlasing Use efficient lighting techniques \ud83c\udfaf Implementation Priorities Core Systems Plant mutations Cross-pollination Plant diseases Ritual System Advanced rituals Group rituals Ritual combinations Memory System Memory categories Memory effects Memory persistence Environment Weather system Day/night cycle Seasonal changes UI Plant interaction Ritual visualization Memory viewing Performance Memory optimization Visual effects Sound effects","title":"NeuroBloom Technical Design Document"},{"location":"TECHNICAL_DESIGN/#neurobloom-technical-design-document","text":"","title":"NeuroBloom Technical Design Document"},{"location":"TECHNICAL_DESIGN/#overview","text":"This document outlines the technical design for upcoming NeuroBloom features, focusing on the current sprint's goals and implementation details.","title":"\ud83c\udfaf Overview"},{"location":"TECHNICAL_DESIGN/#core-systems-enhancement","text":"","title":"\ud83d\udccb Core Systems Enhancement"},{"location":"TECHNICAL_DESIGN/#1-plant-system","text":"","title":"1. Plant System"},{"location":"TECHNICAL_DESIGN/#plant-mutations","text":"-- PlantMutationSystem.lua local PlantMutationSystem = { MUTATION_TYPES = { COLOR = \"ColorMutation\", SHAPE = \"ShapeMutation\", EFFECT = \"EffectMutation\", HYBRID = \"HybridMutation\" }, MUTATION_TRIGGERS = { EMOTIONAL = \"EmotionalTrigger\", ENVIRONMENTAL = \"EnvironmentalTrigger\", INTERACTION = \"InteractionTrigger\", TIME = \"TimeTrigger\" } } function PlantMutationSystem.createMutation(plant, type, trigger) -- Implementation end function PlantMutationSystem.applyMutation(plant, mutation) -- Implementation end function PlantMutationSystem.revertMutation(plant, mutation) -- Implementation end","title":"Plant Mutations"},{"location":"TECHNICAL_DESIGN/#cross-pollination","text":"-- CrossPollinationSystem.lua local CrossPollinationSystem = { POLLINATION_TYPES = { WIND = \"WindPollination\", INSECT = \"InsectPollination\", MANUAL = \"ManualPollination\" }, HYBRID_TYPES = { JOY_PEACE = \"JoyPeaceHybrid\", HOPE_GRIEF = \"HopeGriefHybrid\", CUSTOM = \"CustomHybrid\" } } function CrossPollinationSystem.initiatePollination(plant1, plant2, type) -- Implementation end function CrossPollinationSystem.createHybrid(plant1, plant2) -- Implementation end function CrossPollinationSystem.applyHybridTraits(hybrid, traits) -- Implementation end","title":"Cross-Pollination"},{"location":"TECHNICAL_DESIGN/#plant-diseases","text":"-- PlantDiseaseSystem.lua local PlantDiseaseSystem = { DISEASE_TYPES = { FUNGAL = \"FungalDisease\", VIRAL = \"ViralDisease\", NUTRITIONAL = \"NutritionalDisease\" }, HEALING_METHODS = { RITUAL = \"RitualHealing\", MEDICINE = \"MedicineHealing\", NATURAL = \"NaturalHealing\" } } function PlantDiseaseSystem.detectDisease(plant) -- Implementation end function PlantDiseaseSystem.spreadDisease(disease, plants) -- Implementation end function PlantDiseaseSystem.healDisease(plant, method) -- Implementation end","title":"Plant Diseases"},{"location":"TECHNICAL_DESIGN/#2-ritual-system","text":"","title":"2. Ritual System"},{"location":"TECHNICAL_DESIGN/#advanced-rituals","text":"-- AdvancedRitualSystem.lua local AdvancedRitualSystem = { RITUAL_TYPES = { HEALING = \"HealingRitual\", GROWTH = \"GrowthRitual\", TRANSFORMATION = \"TransformationRitual\" }, RITUAL_COMPONENTS = { GESTURES = \"Gestures\", CHANTS = \"Chants\", OFFERINGS = \"Offerings\", SYMBOLS = \"Symbols\" } } function AdvancedRitualSystem.createRitual(type, components) -- Implementation end function AdvancedRitualSystem.performRitual(ritual, participants) -- Implementation end function AdvancedRitualSystem.calculateOutcome(ritual, emotions) -- Implementation end","title":"Advanced Rituals"},{"location":"TECHNICAL_DESIGN/#group-rituals","text":"-- GroupRitualSystem.lua local GroupRitualSystem = { SYNC_TYPES = { EMOTIONAL = \"EmotionalSync\", MOVEMENT = \"MovementSync\", RHYTHM = \"RhythmSync\" }, GROUP_SIZES = { SMALL = 2, MEDIUM = 4, LARGE = 8 } } function GroupRitualSystem.synchronizeParticipants(ritual, participants) -- Implementation end function GroupRitualSystem.calculateGroupEnergy(participants) -- Implementation end function GroupRitualSystem.distributeRewards(ritual, participants) -- Implementation end","title":"Group Rituals"},{"location":"TECHNICAL_DESIGN/#3-memory-system","text":"","title":"3. Memory System"},{"location":"TECHNICAL_DESIGN/#memory-categories","text":"-- MemoryCategorySystem.lua local MemoryCategorySystem = { CATEGORIES = { PERSONAL = \"PersonalMemory\", SHARED = \"SharedMemory\", RITUAL = \"RitualMemory\", PLANT = \"PlantMemory\" }, TAGS = { EMOTIONAL = \"EmotionalTag\", SEASONAL = \"SeasonalTag\", SPECIAL = \"SpecialTag\" } } function MemoryCategorySystem.categorizeMemory(memory, category) -- Implementation end function MemoryCategorySystem.addTags(memory, tags) -- Implementation end function MemoryCategorySystem.filterMemories(category, tags) -- Implementation end","title":"Memory Categories"},{"location":"TECHNICAL_DESIGN/#memory-effects","text":"-- MemoryEffectSystem.lua local MemoryEffectSystem = { EFFECT_TYPES = { VISUAL = \"VisualEffect\", AUDIO = \"AudioEffect\", EMOTIONAL = \"EmotionalEffect\", ENVIRONMENTAL = \"EnvironmentalEffect\" } } function MemoryEffectSystem.applyEffect(memory, effectType) -- Implementation end function MemoryEffectSystem.calculateIntensity(memory, effectType) -- Implementation end function MemoryEffectSystem.blendEffects(effects) -- Implementation end","title":"Memory Effects"},{"location":"TECHNICAL_DESIGN/#memory-persistence","text":"-- MemoryPersistenceSystem.lua local MemoryPersistenceSystem = { STORAGE_TYPES = { LOCAL = \"LocalStorage\", CLOUD = \"CloudStorage\", HYBRID = \"HybridStorage\" } } function MemoryPersistenceSystem.saveMemory(memory, storageType) -- Implementation end function MemoryPersistenceSystem.loadMemory(memoryId, storageType) -- Implementation end function MemoryPersistenceSystem.syncMemories() -- Implementation end","title":"Memory Persistence"},{"location":"TECHNICAL_DESIGN/#data-structures","text":"","title":"\ud83d\udcca Data Structures"},{"location":"TECHNICAL_DESIGN/#plant-data","text":"local PlantData = { id = \"string\", type = \"string\", growthStage = \"number\", emotions = { JOY = \"number\", PEACE = \"number\", HOPE = \"number\", GRIEF = \"number\" }, mutations = { active = \"table\", history = \"table\" }, diseases = { active = \"table\", history = \"table\" }, pollination = { partners = \"table\", hybrids = \"table\" } }","title":"Plant Data"},{"location":"TECHNICAL_DESIGN/#ritual-data","text":"local RitualData = { id = \"string\", type = \"string\", participants = \"table\", components = \"table\", progress = \"number\", emotions = { JOY = \"number\", PEACE = \"number\", HOPE = \"number\", GRIEF = \"number\" }, rewards = \"table\" }","title":"Ritual Data"},{"location":"TECHNICAL_DESIGN/#memory-data","text":"local MemoryData = { id = \"string\", type = \"string\", category = \"string\", tags = \"table\", emotions = { JOY = \"number\", PEACE = \"number\", HOPE = \"number\", GRIEF = \"number\" }, effects = \"table\", persistence = { storage = \"string\", lastSync = \"number\" } }","title":"Memory Data"},{"location":"TECHNICAL_DESIGN/#event-system","text":"","title":"\ud83d\udd04 Event System"},{"location":"TECHNICAL_DESIGN/#event-types","text":"local Events = { PLANT = { MUTATED = \"PlantMutated\", POLLINATED = \"PlantPollinated\", DISEASED = \"PlantDiseased\", HEALED = \"PlantHealed\" }, RITUAL = { STARTED = \"RitualStarted\", PROGRESS = \"RitualProgress\", COMPLETED = \"RitualCompleted\", FAILED = \"RitualFailed\" }, MEMORY = { CREATED = \"MemoryCreated\", UPDATED = \"MemoryUpdated\", SHARED = \"MemoryShared\", EFFECTED = \"MemoryEffected\" } }","title":"Event Types"},{"location":"TECHNICAL_DESIGN/#ui-components","text":"","title":"\ud83c\udfa8 UI Components"},{"location":"TECHNICAL_DESIGN/#plant-interaction-ui","text":"local PlantInteractionUI = { components = { infoPanel = \"Frame\", emotionDisplay = \"Frame\", mutationControls = \"Frame\", diseaseStatus = \"Frame\" }, states = { NORMAL = \"NormalState\", MUTATING = \"MutatingState\", DISEASED = \"DiseasedState\", HEALING = \"HealingState\" } }","title":"Plant Interaction UI"},{"location":"TECHNICAL_DESIGN/#ritual-ui","text":"local RitualUI = { components = { progressBar = \"Frame\", emotionInput = \"Frame\", componentDisplay = \"Frame\", participantList = \"Frame\" }, states = { PREPARING = \"PreparingState\", ACTIVE = \"ActiveState\", COMPLETING = \"CompletingState\" } }","title":"Ritual UI"},{"location":"TECHNICAL_DESIGN/#memory-ui","text":"local MemoryUI = { components = { memoryList = \"Frame\", categoryFilter = \"Frame\", effectDisplay = \"Frame\", sharingControls = \"Frame\" }, states = { VIEWING = \"ViewingState\", EDITING = \"EditingState\", SHARING = \"SharingState\" } }","title":"Memory UI"},{"location":"TECHNICAL_DESIGN/#performance-considerations","text":"","title":"\ud83d\udd27 Performance Considerations"},{"location":"TECHNICAL_DESIGN/#memory-optimization","text":"Implement object pooling for frequently created objects Use weak tables for temporary references Implement cleanup routines for unused resources Cache frequently accessed data Use efficient data structures","title":"Memory Optimization"},{"location":"TECHNICAL_DESIGN/#network-optimization","text":"Implement delta compression for state updates Use efficient serialization for data transfer Implement client-side prediction Use reliable and unreliable channels appropriately Implement rate limiting","title":"Network Optimization"},{"location":"TECHNICAL_DESIGN/#rendering-optimization","text":"Use LOD (Level of Detail) for distant objects Implement occlusion culling Use efficient particle systems Implement texture atlasing Use efficient lighting techniques","title":"Rendering Optimization"},{"location":"TECHNICAL_DESIGN/#implementation-priorities","text":"Core Systems Plant mutations Cross-pollination Plant diseases Ritual System Advanced rituals Group rituals Ritual combinations Memory System Memory categories Memory effects Memory persistence Environment Weather system Day/night cycle Seasonal changes UI Plant interaction Ritual visualization Memory viewing Performance Memory optimization Visual effects Sound effects","title":"\ud83c\udfaf Implementation Priorities"}]}